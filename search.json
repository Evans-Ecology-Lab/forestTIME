[{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/articles/forestTIME-builder.html","id":"data-download","dir":"Articles","previous_headings":"","what":"Data Download","title":"forestTIME-builder","text":"fia_download() downloads zip files CSVs extracts necessary ones. skip downloading files already exist.","code":"fia_download(   states = \"DE\",   download_dir = \"fia\",   keep_zip = TRUE )"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/articles/forestTIME-builder.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"forestTIME-builder","text":"need make sure columns population estimation columns carbon estimation using walker code (documented better annual_carbon_estimation.qmd). fia_load() wrapper around rFIA::readFIA() reads required tables list data frames. fia_tidy() gets columns needed single table create unique plot tree IDS, plot_ID tree_ID. Check tree 1 entry per year","code":"db <- fia_load(states = \"DE\", dir = \"fia\") names(db) #> [1] \"COND\"                   \"PLOT\"                   \"PLOTGEOM\" #> [4] \"POP_ESTN_UNIT\"          \"POP_EVAL_TYP\"           \"POP_EVAL\" #> [7] \"POP_PLOT_STRATUM_ASSGN\" \"POP_STRATUM\"            \"TREE\" data <- fia_tidy(db) #> ℹ Wrangling data #> ✔ Wrangling data [290ms] #>  data n <- data |>   group_by(tree_ID, INVYR) |>   filter(!is.na(tree_ID)) |> #remove empty plots   summarise(n = n(), .groups = \"drop\") |>   filter(n > 1) |>   nrow() stopifnot(n == 0)"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/articles/forestTIME-builder.html","id":"annualize","dir":"Articles","previous_headings":"","what":"Annualize","title":"forestTIME-builder","text":"Annualization panel data performed fia_annualize(). “hood” running expand_data() followed interpolate_data() adjust_mortality(). can run steps separately, generally recommended “artifacts” introduced steps “cleaned ” later steps. One good reason run step-wise wanting produce result without using MORTYR since slowest step interpolate_data(). Let’s break happens step. expand_data() expands table include years inventories. Time-invariant columns including plot_ID, SPCD, ECOSUBCD, DESIGNCD, CONDID, INTENSITY PROP_BASIS simply filled . NAs thar represent missing values inventory years replaced placeholder values (e.g. 999, 0 CULL) distinguish NAs surveys aid linear interpolation later steps. interpolate_data() interpolates continuous categorical variables surveys. Continuous variables interpolated inter_extra_polate() categorical variables interpolated step_interp(). interpolate_data() also joins TPA_UNADJ column based DESIGNCD DIA. trees interpolated FIA thresholds measured (DIA < 1, ACTUALHT < 1 woodland species < 4.5 non-woodland species), assumed fallen dead STATUSCD set 2 STANDING_DEAD_CD set 0. adjust_mortality() adjusts columns related mortality (STATUSCD, STANDING_DEAD_CD, DECAYCD, measurements like DIA, HT, ACTUALHT, CULL, CR etc.). E.g. DECAYCD applies standing dead trees STANDING_DEAD_CD applies trees STATUSCD 2 (dead). tables identical states like RI MORTYR never used, states records MORTYR tables differ slightly subset trees.","code":"data_midpt <- fia_annualize(data, use_mortyr = FALSE) #> ℹ Adjusting for mortality #> ℹ Interpolating between surveys #> ℹ Expanding years between surveys #> ✔ Expanding years between surveys [3.3s] #>  #> ℹ Interpolating between surveys ✔ Interpolating between surveys [18s] #>  #> ℹ Adjusting for mortality ✔ Adjusting for mortality [26.6s] data_midpt_stepwise <- data |>   expand_data() |> #has placeholder values (e.g. 999) for some variables to ensure correct interpolation   interpolate_data() |> #has incorrect values for trees that die or fall between surveys   adjust_mortality(use_mortyr = FALSE) #> ℹ Adjusting for mortality #> ℹ Interpolating between surveys #> ℹ Expanding years between surveys #> ✔ Expanding years between surveys [3.3s] #>  #> ℹ Interpolating between surveys ✔ Interpolating between surveys [17.9s] #>  #> ℹ Adjusting for mortality ✔ Adjusting for mortality [26.5s] identical(data_midpt, data_midpt_stepwise) #> [1] TRUE data_expanded <- expand_data(data) #> ℹ Expanding years between surveys #> ✔ Expanding years between surveys [3.2s] #>  data_expanded data_interpolated <- interpolate_data(data_expanded) #> ℹ Interpolating between surveys #> ✔ Interpolating between surveys [14.4s] #>  data_interpolated data_mortyr <- adjust_mortality(data_interpolated, use_mortyr = TRUE) #> ℹ Adjusting for mortality #> Warning: ! No recorded `MORTYR` in data. #> ℹ Setting `use_mortyr` to `FALSE` #> ✔ Adjusting for mortality [8.6s] #>  data_midpt <- adjust_mortality(data_interpolated, use_mortyr = FALSE) #> ℹ Adjusting for mortality #> ✔ Adjusting for mortality [8.7s] #>  all.equal(data_mortyr, data_midpt) #> [1] TRUE"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/articles/forestTIME-builder.html","id":"carbon-estimation","dir":"Articles","previous_headings":"","what":"Carbon Estimation","title":"forestTIME-builder","text":"fia_estimate() uses code provided David Walker calculate carbon biomass variables using National Scale Volume Biomass estimators (NSVB) (Westfall et al. 2024).","code":"data_midpt_carbon <- fia_estimate(data_midpt) #> ℹ Prepping for estimating carbon #> ✔ Prepping for estimating carbon [117ms] #>  #> ⠙ Estimating carbon: prepping data #> ⠹ Estimating carbon: predicting merchantable stem wood volume #> ⠸ Estimating carbon: predicting merchantable stem wood and bark volume #> ⠼ Estimating carbon: predicting sawlog stem wood volume #> ⠴ Estimating carbon: predicting sawlog stem wood and bark volume #> ⠦ Estimating carbon: harmonizing components #> ✔ Estimating carbon: harmonizing components [15.3s] #>  data_midpt_carbon"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/articles/pop_scaling.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example data","title":"Population scaling","text":"’ll use RI example state small. ’ll just use built-example data comes forestTIME.builder, download wanted use rFIA also, make sure set extract = \"rFIA\" extract tables needed forestTIME.builder rFIA. Important rFIA produces estimates carbon 33 – 40.7 tons/acre using design-based estimators. “Correct” estimates ballpark. ’ll use standard basic workflow get estimated aboveground carbon tree year. ’ll add domain indicator columns done rFIA demystified vignette calculate carbon live trees per area forested land using base intensity plots . Reason: build separate domain indicators estimating tree totals area totals, can specify different domains interest . example, used tree domain (live trees forest land) estimate area, actually estimating full forested area RI. Instead estimate forested area live trees currently present. can’t just filter(STATUSCD == 1 & COND_STATUSCD == 1) estimate carbon tons/acre.","code":"fia_download(states = \"RI\", download_dir = \"fia\", extract = \"rFIA\") rfia_RI <- readFIA(   dir = system.file(\"exdata\", package = \"forestTIME.builder\"),   states = \"RI\" )  agc_rfia_annual <-   biomass(     rfia_RI,     totals = TRUE,     method = \"annual\",     treeType = \"live\",     landType = 'forest',     component = \"AG\",     areaDomain = COND_STATUS_CD == 1 & INTENSITY == 1   ) |>   mutate(method = \"rFIA annual\") |>   select(method, YEAR, carbon_ton_acre = CARB_ACRE, carbon_total = CARB_TOTAL) #> Warning: The `.dots` argument of `group_by()` is deprecated as of dplyr 1.0.0. #> ℹ The deprecated feature was likely used in the dplyr package. #>   Please report the issue at <https://github.com/tidyverse/dplyr/issues>.  agc_rfia_ti <-   biomass(     rfia_RI,     totals = TRUE,     method = \"TI\",     treeType = \"live\",     landType = 'forest',     component = \"AG\",     areaDomain = COND_STATUS_CD == 1 & INTENSITY == 1   ) |>   mutate(method = \"rFIA TI\") |>   select(method, YEAR, carbon_ton_acre = CARB_ACRE, carbon_total = CARB_TOTAL)  mean(agc_rfia_annual$carbon_ton_acre) #> [1] 34.03135 mean(agc_rfia_ti$carbon_ton_acre) #> [1] 34.01003 # Data prep db <- fia_load(   \"RI\",   dir = system.file(\"exdata\", package = \"forestTIME.builder\") ) data <- fia_tidy(db) #single tibble #> ℹ Wrangling data #> ✔ Wrangling data [203ms] #>   # Expand to include all years between surveys and interpolate/extrapolate # Adjust for mortality and estimate carbon. data_midpt <- data |>   fia_annualize(use_mortyr = FALSE) |>   fia_estimate() #> ℹ Prepping for estimating carbon #> ℹ Adjusting for mortality #> ℹ Interpolating between surveys #> ℹ Expanding years between surveys #> ✔ Expanding years between surveys [2.3s] #>  #> ℹ Interpolating between surveys ✔ Interpolating between surveys [12.7s] #>  #> ℹ Adjusting for mortality ✔ Adjusting for mortality [18.6s] #>  #> ℹ Prepping for estimating carbon ✔ Prepping for estimating carbon [18.9s] #>  #> ⠙ Estimating carbon: prepping data #> ⠹ Estimating carbon: finding merchantable height #> ⠸ Estimating carbon: predicting merchantable stem wood volume #> ⠼ Estimating carbon: finding sawlog height #> ⠴ Estimating carbon: predicting sawlog stem wood volume #> ⠦ Estimating carbon: predicting total biomass #> ✔ Estimating carbon: harmonizing components [15.5s] data_midpt <-   data_midpt |>   mutate(     aDI = if_else(COND_STATUS_CD == 1 & INTENSITY == 1, 1, 0), #forested land     tDI = if_else(STATUSCD == 1, 1, 0) * aDI #live trees on forested land   )"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/articles/pop_scaling.html","id":"expansion-factors","dir":"Articles","previous_headings":"","what":"Expansion factors","title":"Population scaling","text":"FIA data provides users expansion factors, EXPNS, aid scaling estimates state levels. two issues using provided EXPNS annualized data: 1) straightforward join tables get EXPNS column, 2) now many plots year, EXPNS column longer accurate (acres entire state represented plot). Therefore, fia_annualize() re-calculates EXPNS column total land area state divided number plots interpolated data state year. think EXPNS values can used much way ones “raw” FIA database.  ’ll notice calculated EXPNS follow “U” shape rather constant. interpolated data, fewer plots beginning end timeseries extrapolate beyond panel’s first last inventory. Using expansion factors, can follow methods FIA demystified vignette.   ballbark similar estimates ones rFIA produces.","code":"data_midpt |>   select(YEAR, EXPNS) |>   group_by(YEAR) |>   summarize(EXPNS = unique(EXPNS)) |>   ggplot(aes(x = YEAR, y = EXPNS)) +   geom_line() tree_totals <- data_midpt |>   group_by(plot_ID, YEAR) |>   summarize(     # purposefully omits ajustment factor `aAdj` because it is assumed to be 1     carbPlot = sum(CARBON_AG * TPA_UNADJ * EXPNS * tDI / 2000, na.rm = TRUE), #tons/plot   ) #> `summarise()` has grouped output by 'plot_ID'. You can override using the #> `.groups` argument.  area_totals <- data_midpt |>   group_by(plot_ID, YEAR) |>   # Keep only one row for each condition in each plot and year   distinct(CONDID, COND_STATUS_CD, CONDPROP_UNADJ, EXPNS, aDI) |>   summarize(     # purposefully omits ajustment factor `aAdj` because it is assumed to be 1     forArea = sum(CONDPROP_UNADJ * EXPNS * aDI, na.rm = TRUE) #acres/plot   ) #> `summarise()` has grouped output by 'plot_ID'. You can override using the #> `.groups` argument.  agc_pop <- inner_join(tree_totals, area_totals) |>   group_by(YEAR) |>   summarize(     CARB_AG_TOTAL = sum(carbPlot, na.rm = TRUE), # tons/plot     AREA_TOTAL = sum(forArea, na.rm = TRUE) # acres/plot   ) |>   # the units work out to still be tons(live carbon)/acre(forested land) even if the variable names are misleading   mutate(method = \"forestTIME\", carbon_ton_acre = CARB_AG_TOTAL / AREA_TOTAL) |>   select(     method,     YEAR,     carbon_ton_acre,     carbon_total = CARB_AG_TOTAL,     AREA_TOTAL   ) #> Joining with `by = join_by(plot_ID, YEAR)` agc_pop all <- bind_rows(agc_rfia_annual, agc_rfia_ti, agc_pop)  ggplot(all, aes(x = YEAR, y = carbon_total, color = method)) +   geom_line() +   labs(y = \"Total Carbon (tons)\") ggplot(all, aes(x = YEAR, y = carbon_ton_acre, color = method)) +   geom_line() +   labs(y = \"Mean Carbon/Acre (tons/acre)\")"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eric R. Scott. Author, maintainer. Renata Diaz. Author. Dani Steinberg. Contributor. Kristina Riemer. Contributor. Margaret Evans. Contributor.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Scott E, Diaz R (2025). forestTIME.builder: Generate Annualized Carbon Biomass Estimates FIA Data. R package version 2.0.0.9000, https://github.com/Evans-Ecology-Lab/forestTIME-builder.","code":"@Manual{,   title = {forestTIME.builder: Generate Annualized Carbon and Biomass Estimates From FIA Data},   author = {Eric R. Scott and Renata Diaz},   year = {2025},   note = {R package version 2.0.0.9000},   url = {https://github.com/Evans-Ecology-Lab/forestTIME-builder}, }"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/index.html","id":"foresttime-builder","dir":"","previous_headings":"","what":"Generate Annualized Carbon and Biomass Estimates From FIA Data","title":"Generate Annualized Carbon and Biomass Estimates From FIA Data","text":"[!CAUTION] forestTIME.builder experimental package currently work--progress. official product US Forest Service. R package contains functions create annualized versions FIA data. can download raw FIA data DataMart, merge required tables, interpolate surveys, re-estimate biomass carbon interpolated values. output single dataframe values every tree every year rather original panel design. base-intensity plots (INTENSITY == 1) included.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Annualized Carbon and Biomass Estimates From FIA Data","text":"forestTIME.builder CRAN. install r-universe: install GitHub:","code":"install.packages(\"forestTIME.builder\", repos = c(\"https://cct-datascience.r-universe.dev\", getOption(\"repos\"))) #install.packages(\"pak\") pak::pak(\"Evans-Ecology-Lab/forestTIME-builder\")"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Generate Annualized Carbon and Biomass Estimates From FIA Data","text":"’d like make modifications functions package, welcome . However, ideal modifications incorporated package benefit everyone using keep single “source truth” workflow. brand new R package development using GitHub, recommend start opening issue make suggestion report bug. familiarity R code feel comfortable, feel free make pull request. recommend using usethis handle process familiar git GitHub. Start setting GitHub credentials use usethis::create_from_github(\"Evans-Ecology-Lab/forestTIME-builder\") (possibly fork) clone repository. usethis package nice documentation create pull requests using ’s pr_*() functions, namely pr_init() create new branch, pr_push() actually open pull request GitHub, pr_finish() clean things yoru pull request merged.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/index.html","id":"automation","dir":"","previous_headings":"","what":"Automation","title":"Generate Annualized Carbon and Biomass Estimates From FIA Data","text":"Eventually, repository contain GitHub workflow automate interpolation carbon estimation states provide resulting annualized dataset(s).","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Generate Annualized Carbon and Biomass Estimates From FIA Data","text":"cite work, please use: Scott E.R., Diaz R., Steinberg D., Riemer K., Evans M. (2025). “forestTIME.builder: Generate Annualized Carbon Biomass Estimates FIA Data” https://github.com/Evans-Ecology-Lab/forestTIME-builder. Please also cite Westfall et al. (2024): Westfall, J.., Coulston, J.W., Gray, .N., Shaw, J.D., Radtke, P.J., Walker, D.M., Weiskittel, .R., MacFarlane, D.W., Affleck, D.L.R., Zhao, D., Temesgen, H., Poudel, K.P., Frank, J.M., Prisley, S.P., Wang, Y., Sánchez Meador, .J., Auty, D., Domke, G.M., 2024. national-scale tree volume, biomass, carbon modeling system United States. U.S. Department Agriculture, Forest Service. https://doi.org/10.2737/wo-gtr-104 Developed collaboration University Arizona CCT Data Science team","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/adjust_mortality.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust interpolated tables for mortality — adjust_mortality","title":"Adjust interpolated tables for mortality — adjust_mortality","text":"\"internal\" function—users want run fia_annualize() instead. Trees input data_interpolated already switch STATUSCD 2 (.e. death) interpolated midpoint (rounded ) last survey alive first survey dead.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/adjust_mortality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust interpolated tables for mortality — adjust_mortality","text":"","code":"adjust_mortality(data_interpolated, use_mortyr = TRUE)"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/adjust_mortality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust interpolated tables for mortality — adjust_mortality","text":"data_interpolated tibble created interpolate_data() use_mortyr logical; use MORTYR (recorded) first year tree dead?","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/adjust_mortality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust interpolated tables for mortality — adjust_mortality","text":"tibble","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/adjust_mortality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust interpolated tables for mortality — adjust_mortality","text":"following: Optionally figures tree recorded MORTYR uses transition STATUSCD 2 instead interpolated values. tree alive (STATUSCD 1) MORTYR, assumed died following year. Adjusts STANDING_DEAD_CD applies dead trees Adjusts DECAYCD applies standing dead trees Adjusts DIA, HT, ACTUALHT, CULL, CR apply live standing dead trees sampled conitions.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/expand_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand data to include years between inventory years — expand_data","title":"Expand data to include years between inventory years — expand_data","text":"\"internal\" function—users want run fia_annualize() instead. expands data frame preparation interpolation now \"missing\" values inventory years. Time-invariant variables tree_ID, plot_ID, INTENSITY, SPCD, MORTYR, ECOSUBCD, DESIGNCD, PROP_BASIS simply filled tidyr::fill(). Categorical variables STATUDSCD, RECONCILECD, STDORGCD, CONDID, COND_STATUS_CD modified replace NAs 999 properly interpolated interpolate_data() (converts back NAs).","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/expand_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand data to include years between inventory years — expand_data","text":"","code":"expand_data(data)"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/expand_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand data to include years between inventory years — expand_data","text":"data tibble produced fia_tidy()—must least tree_ID INVYR columns.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/expand_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand data to include years between inventory years — expand_data","text":"tibble logical column interpolated marking whether row present original data (FALSE) added (TRUE).","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_add_composite_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Add composite ID columns to data — fia_add_composite_ids","title":"Add composite ID columns to data — fia_add_composite_ids","text":"Creates tree_ID /plot_ID column contain unique tree plot identifiers, respectively.  created pasting together values STATECD, UNITCD, COUNTYCD, PLOT case trees SUBP TREE.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_add_composite_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add composite ID columns to data — fia_add_composite_ids","text":"","code":"fia_add_composite_ids(data)"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_add_composite_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add composite ID columns to data — fia_add_composite_ids","text":"data tibble data frame least STATECD, UNITCD, COUNTYCD PLOT columns","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_add_composite_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add composite ID columns to data — fia_add_composite_ids","text":"input tibble plot_ID possibly also tree_ID column added","code":""},{"path":[]},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_annualize.html","id":null,"dir":"Reference","previous_headings":"","what":"Create annualized FIA data — fia_annualize","title":"Create annualized FIA data — fia_annualize","text":"Converts tidied panel data annualized data interpolated measurments trees years inventories. happens three steps, can \"manually\" replicated chaining forestTIME.builder functions.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_annualize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create annualized FIA data — fia_annualize","text":"","code":"fia_annualize(data_tidy, use_mortyr = TRUE)"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_annualize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create annualized FIA data — fia_annualize","text":"data_tidy tibble produced fia_tidy(). use_mortyr logical; Use MORTYR (recorded) first year tree dead? Passed adjust_mortality().","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_annualize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create annualized FIA data — fia_annualize","text":"First, data expanded expand_data() add rows years inventories tree data. Next, data interpolated interpolate_data(). Finally, adjust_mortality() applied. trees die /fall inventories, adjust history according either recorded MORTYR (use_morty = TRUE) , fall-back, midpoint surveys, rounded . Unlike intermediate functions, fia_annualize() produces dataset can safely used analyses (caveat experimental).","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_annualize.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create annualized FIA data — fia_annualize","text":"users use \"wrapper\" function rather running step separately since intermediate steps may contain data artifacts. However, one reason use stepwise workflow save time generating interpolated data without using MORTYR interpolate_data() slowest step.","code":""},{"path":[]},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download zip files from FIA datamart — fia_download","title":"Download zip files from FIA datamart — fia_download","text":"zip files smaller just *_TREE.csv, just downloads whole zip extracts required CSV files. Uses curl::multi_download() resumes skips partial incomplete downloads, respectively, run subsequent times.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download zip files from FIA datamart — fia_download","text":"","code":"fia_download(   states,   download_dir = \"fia\",   extract = c(\"forestTIME\", \"rFIA\", \"all\", \"none\"),   keep_zip = TRUE )"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download zip files from FIA datamart — fia_download","text":"states vector state abbreviations; states use state.abb. download_dir save zip files. extract files extract downloaded zip file—needed forestTIME.builder, needed rFIA (includes tables forestTIME.builder needs), files, none. keep_zip logical; keep .zip file CSVs extracted? Defaults TRUE.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download zip files from FIA datamart — fia_download","text":"returns nothing","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download zip files from FIA datamart — fia_download","text":"","code":"if (FALSE) { # \\dontrun{ # \"Standard\" download fia_download(states = c(\"RI\", \"DE\"))  # Extract enough tables so it works with rFIA::readFIA() also fia_download(states = c(\"RI\", \"DE\"), extract = \"rFIA\") } # }"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate biomass and carbon using NSVB framework — fia_estimate","title":"Estimate biomass and carbon using NSVB framework — fia_estimate","text":"Estimates biomass carbon variables using National Scale Volume Biomass estimators (NSVB).","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate biomass and carbon using NSVB framework — fia_estimate","text":"","code":"fia_estimate(data)"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate biomass and carbon using NSVB framework — fia_estimate","text":"data data frame tibble; generally output fia_annualize().","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate biomass and carbon using NSVB framework — fia_estimate","text":"tibble additional columns DRYBIO_AG CARBON_AG correspond FIAdb definitions variables.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_estimate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate biomass and carbon using NSVB framework — fia_estimate","text":"Westfall, J.., Coulston, J.W., Gray, .N., Shaw, J.D., Radtke, P.J., Walker, D.M., Weiskittel, .R., MacFarlane, D.W., Affleck, D.L.R., Zhao, D., Temesgen, H., Poudel, K.P., Frank, J.M., Prisley, S.P., Wang, Y., Sánchez Meador, .J., Auty, D., Domke, G.M., 2024. national-scale tree volume, biomass, carbon modeling system United States. U.S. Department Agriculture, Forest Service. doi:10.2737/wo-gtr-104","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_estimate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate biomass and carbon using NSVB framework — fia_estimate","text":"David Walker","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_load.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in needed tables — fia_load","title":"Read in needed tables — fia_load","text":"Wrapper rFIA::readFIA reads necessary tables","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in needed tables — fia_load","text":"","code":"fia_load(states, dir = \"fia\")"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in needed tables — fia_load","text":"states character; state/ US territory abbreviations (e.g. 'AL', 'MI', etc.) indicating state subsets read. Data state must dir. Choose read multiple states passing character vector state abbreviations (e.g. states = c('RI', 'CT', 'MA')). states = NULL, data states within dir read merged regional database. dir directory .csv files FIA tables stored.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in needed tables — fia_load","text":"list data frames","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_split_composite_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Split composite ID columns — fia_split_composite_ids","title":"Split composite ID columns — fia_split_composite_ids","text":"Splits composite ID columns tree_ID /plot_ID original component columns","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_split_composite_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split composite ID columns — fia_split_composite_ids","text":"","code":"fia_split_composite_ids(data)"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_split_composite_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split composite ID columns — fia_split_composite_ids","text":"data tibble tree_ID /plot_ID columns","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_split_composite_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split composite ID columns — fia_split_composite_ids","text":"input tibble additional columns STATECD, UNITCD, COUNTYCD, PLOT possibly SUBP TREE.","code":""},{"path":[]},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in and join all required tables — fia_tidy","title":"Read in and join all required tables — fia_tidy","text":"Reads tables needed carbon estimation population scaling joins single table. , additional data cleaning steps performed. Creates unique tree plot identifiers (tree_ID plot_ID, respectively). Fills missing values ACTUALHT values HT prepare interpolation. Overwrites SPCD whatever last value SPCD tree (handle trees change SPCD). Fills tree's MORTYR column every row contains recorded mortality year.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in and join all required tables — fia_tidy","text":"","code":"fia_tidy(db)"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in and join all required tables — fia_tidy","text":"db list tables produced fia_load()","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/fia_tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in and join all required tables — fia_tidy","text":"tibble","code":""},{"path":[]},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/inter_extra_polate.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear intrpolation and extrapolation — inter_extra_polate","title":"Linear intrpolation and extrapolation — inter_extra_polate","text":"Performs linear interpolation , optionally, extrapolation numeric vectors. forestTIME.builder, Interpolation used annualizing tree measurements DIA, HT, ACTUALHT. Extrapolation necessary trees alive one inventory, fallen dead NAs next inventory, want extrapolate growth last time inventoried alive estimated mortality year. case vectors one non-NA value, value carried forward extrapolate = TRUE.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/inter_extra_polate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear intrpolation and extrapolation — inter_extra_polate","text":"","code":"inter_extra_polate(x, y, extrapolate = TRUE)"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/inter_extra_polate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear intrpolation and extrapolation — inter_extra_polate","text":"x numeric; x variable, usually YEAR forestTIME-builder y numeric; variable interpolated/extrapolated extrapolate logical; perform extrapolation possible?","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/inter_extra_polate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear intrpolation and extrapolation — inter_extra_polate","text":"numeric vector numeric vector","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/inter_extra_polate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Linear intrpolation and extrapolation — inter_extra_polate","text":"Eric R. Scott","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/inter_extra_polate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear intrpolation and extrapolation — inter_extra_polate","text":"","code":"x <- 1:7 y <- c(2, NA, 5, 6, NA, NA, NA) inter_extra_polate(x = x, y = y) #> [1] 2.0 3.5 5.0 6.0 7.0 8.0 9.0 #with extrapolation inter_extra_polate(x = x, y = y, extrapolate = TRUE) #> [1] 2.0 3.5 5.0 6.0 7.0 8.0 9.0 #single numbers get carried forward y2 <- c(NA, NA, 3, NA, NA) inter_extra_polate(x = x, y = y2, extrapolate = TRUE) #> [1] NA NA  3  3  3"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/interpolate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate expanded tree data — interpolate_data","title":"Interpolate expanded tree data — interpolate_data","text":"\"internal\" function—users want run fia_annualize() instead. Fills NAs survey years either linear interpolation / extrapolation switching categorical variables midpoint (rounded ) surveys. Linear interpolation/extrapolation accomplished inter_extra_polate() categorical variables handled step_interp(). Also converts temporary 999 values created expand_data() back NAs.  also assigns value TPA_UNADJ based DESIGNCD interpolated values DIA according Appendix G FIADB user guide adds EXPNS column equivalent one FIA, accounting fact data now contains interpolated plots (.e. EXPNS = state land area divided total number plots state year interpolated data).","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/interpolate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate expanded tree data — interpolate_data","text":"","code":"interpolate_data(data_expanded)"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/interpolate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate expanded tree data — interpolate_data","text":"data_expanded tibble produced expand_data()","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/interpolate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate expanded tree data — interpolate_data","text":"tibble","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/interpolate_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Interpolate expanded tree data — interpolate_data","text":"HT ACTUALHT extrapolated values < 4.5 (< 1 woodland species) DIA extrapolated < 1, tree marked fallen dead (STATUSCD 2 STANDING_DEAD_CD 0). measurements trees removed (set NA) adjust_mortality(). Trees one measurement measurement carried forward appropriate (e.g. fallen dead non-sampled condition). Since missing values CULL already assumed 0 fia_estimate(), converted 0s expand_data() better linear interpolation set back NA DIA < 5.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/interpolate_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Interpolate expanded tree data — interpolate_data","text":"Burrill, E.., Christensen, G.., Conkling, B.L., DiTommaso, .M., Kralicek, K.M., Lepine, L.C., Perry, C.J., Pugh, S.., Turner, J.., Walker, D.M., 2024. Forest Inventory Analysis Database User Guide (NFI). USDA Forest Service. https://research.fs.usda.gov/understory/forest-inventory--analysis-database-user-guide-nfi","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/state_areas.html","id":null,"dir":"Reference","previous_headings":"","what":"State codes used in FIA — state_areas","title":"State codes used in FIA — state_areas","text":"data frame tha matches STATECD column used FIA data two letter state abbreviations total land area state acres.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/state_areas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"State codes used in FIA — state_areas","text":"","code":"state_areas"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/state_areas.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"State codes used in FIA — state_areas","text":"object class spec_tbl_df (inherits tbl_df, tbl, data.frame) 50 rows 3 columns.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/step_interp.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate categorical variables to switch at midpoint — step_interp","title":"Interpolate categorical variables to switch at midpoint — step_interp","text":"Categorical variables like DECAYCD linearly interpolated inventory years. Instead, assume switch values midpoint (rounded ) non-missing values. Trailing NAs replaced last non-NA value leading NAs returned -.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/step_interp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate categorical variables to switch at midpoint — step_interp","text":"","code":"step_interp(x)"},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/step_interp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate categorical variables to switch at midpoint — step_interp","text":"x vector","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/step_interp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate categorical variables to switch at midpoint — step_interp","text":"vector NAs vector","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/reference/step_interp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate categorical variables to switch at midpoint — step_interp","text":"","code":"step_interp(c(NA, NA, \"A\", NA, NA, NA, \"B\", NA, NA, NA, NA, \"C\", NA)) #>  [1] NA  NA  \"A\" \"A\" \"B\" \"B\" \"B\" \"B\" \"B\" \"C\" \"C\" \"C\" \"C\""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/news/index.html","id":"foresttimebuilder-development-version","dir":"Changelog","previous_headings":"","what":"forestTIME.builder (development version)","title":"forestTIME.builder (development version)","text":"fia_tidy() now keeps base-intensity plots (INTENSITY == 1). Fixed bug causing TPA_UNADJ populated trees states use macroplots (#160). Fixed bug fia_split_composite_ids() caused fail tree_ID NA (conditions observations). now falls back information plot_ID tree_ID data frame NA (#149). fia_estimate() now returns additional variables DRIBIO_FOLIAGE, VOLTSGRS, VOLTSSND addition DRYBIO_AG CARBON_AG. Code deal negative extrapolated values moved adjust_mortality(). Therefore, results interpolate_data() may now contain negative numbers, non-sensible. Use fia_annualize() whenever possible ensure sensible results. fia_download() arguments changed. keep_zip now defaults TRUE. extract options changed TRUE/FALSE \"forestTIME\", \"rFIA\", \"\", \"none\" extract just files needed forestTIME, used rFIA (compatibility), files, none. Fixed bug interpolation CONDPROP_UNAJ. Now workflow retains “empty” conditions (.e. CONDIDs trees ) properly interpolates CONDPROP_UNADJ proportion conditions plot year sum 1 (within rounding error) (#64). fia_annualize() now adds EXPNS column calculated total land area state acres divided number plots interpolated data. usable ways EXPNS column “raw” FIA data can used. Renames state_codes dataset state_areas adds column state land area acres.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/news/index.html","id":"foresttimebuilder-200","dir":"Changelog","previous_headings":"","what":"forestTIME.builder 2.0.0","title":"forestTIME.builder 2.0.0","text":"separate prep_carbon() estimate_carbon() functions longer exported replaced combined fia_estimate() function. Added fia_annualize() wrapper df |> expand_data() |> interpolate_data |> adjust_mortality() prefered running step separately individual steps contain artifacts annualization process. Renamed split_composite_ids() fia_split_composite_ids() Renamed add_composite_ids() fia_add_composite_ids() Renamed prep_data() fia_tidy() Renamed read_fia() fia_load() Renamed get_fia_tables() fia_download()","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/news/index.html","id":"foresttimebuilder-110","dir":"Changelog","previous_headings":"","what":"forestTIME.builder 1.1.0","title":"forestTIME.builder 1.1.0","text":"Fixed bug causing INTENSITY column (possibly plot-level variables) filled incorrectly expand_data() (#122, reported @brian-f-walters-usfs) expand_data() now converts NAs CULL 0s (carbon estimation code predictCRM2() already anyways) better interpolated. CULL values converted back NA DIA < 5 interpolation interpolate_data() (#77). prep_data() longer filters rows (un-#59 addressing #99). want remove certain rows, prep_data() expand_data(). Trees single measurement single measurement carried forward extrapolation rather getting dropped data (#94, #99). case MORTYR inventory year tree alive (STATUSCD 1), now assumed adjust_mortality() tree died year following MORTYR order keep observation (#61). interpolate_data() longer produces negative values HT, DIA, ACTUALHT. Instead, trees get extrapolated DIA < 1 HT ACTUALHT < 4.5 (< 1 woodland species) assumed fallen dead (STATUSCD 2 STANDING_DEAD_CD 0). fallen dead trees measurements set NA adjust_mortality(). Therefore, prep_carbon() longer filters trees negative values HT. (Fixes #60). adjust_mortality() now assures trees non-sampled conditions (COND_STATUS_CD != 1) don’t interpolated values. estimate_carbon() longer modifies columns longer filters rows. adds columns biomass carbon estimates (may NA couldn’t estimated) (finally fixes #63) expand_data() now fills MORTYR constant particular tree. NOTE different column populated raw data. Fixed bug adjust_mortality() causing trees go STATUSCD 2 STATUSCD 0 (move non-sampled area) inapropriately extrapolated values (#100 reported @dnsteinberg) Fixed bug expand_data() caused STANDING_DEAD_CD DECAYCD interpolated correctly, resulting extrapolated measurments fallen dead trees (#101 reported @dnsteinberg) prep_data() now converts PLT_CN numeric character better readability output. Empty plots longer dropped silently prep_data() handled correctly rest workflow interpolate_data(). expand_data() now adds column, interpolated, marks whether observation interpolated (TRUE) original data (FALSE). Trees always fallen measurements now removed prep_data() Trees change species (one SPCD value) assumed always last recorded species. prep_data() now overwrites SPCD last recorded SPCD tree. Additional columns PLT_CN, COND_STATUS_CD kept interpolated data. Added vignette (WIP) use outputs forestTIME.builder get population level estimates. forestTIME.builder now R package Added functions add_composite_ids() split_composite_ids() deal composite ID columns tree_ID plot_ID. make easier join FIA tables.","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/news/index.html","id":"foresttime-builder-v100","dir":"Changelog","previous_headings":"","what":"forestTIME-builder v1.0.0","title":"forestTIME-builder v1.0.0","text":"Refactored use databases instead produce single table interpolated data Added new “main” functions get_fia_tables(), read_fia(), prep_data(), expand_data(), interpolate_data(), adjust_mortality(), prep_carbon(), estimate_carbon() Outlined process creating annualized data docs/pop_scaling.qmd Added “null length 0 coalescing operator” %|||% R/utils.R used suppress warnings come adjusting mortality tree hasn’t yet died. fixed bug TPA_UNADJ wasn’t getting joined trees DIA 4.9 5 (#68) fixed bug categorical vars weren’t interpolated correctly switching NAs (#72) trees RECONCILECD 7 (“Cruiser error”) 8 (“Procedural change”) inventory now removed prep_data() (#59) interpolates trees STATUSCD 0 RECONCILECD 5, 6 9 t2 midpoint t1 t2 removes sample (#59)","code":""},{"path":"https://evans-ecology-lab.github.io/forestTIME-builder/news/index.html","id":"foresttime-builder-v010","dir":"Changelog","previous_headings":"","what":"forestTIME-builder v0.1.0","title":"forestTIME-builder v0.1.0","text":"Initial release “pre-carbon” code annualize tree table, estimate carbon biomass","code":""}]
