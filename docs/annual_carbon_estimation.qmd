---
title: "Calculating Annualized Carbon Estimates"
author: "Eric Scott"
format: gfm
toc: true
---

```{r}
#| label: setup
#| message: false

library(readr)
library(dplyr)
library(tidyr)
library(here)

```

I'm going to try to work through a small sample of data to figure out how the code in forestTIME-builder works

# Read in data

I'll use RI as an example.
Some of the columns get auto-detected as the wrong type (e.g. CN should be character, not numeric, even though it looks like a number).
I got these column types from the Green Book and recorded them in a list in `scripts/create_column_types.R`.

```{r}
tree_raw <- read_csv(
  here("data/rawdat/state/RI_TREE.csv"),
  col_types = cols(
    CN = col_character(),
    PLT_CN = col_character(),
    PREV_TRE_CN = col_character(),
    DAMTYP1 = col_integer(),
    DAMSEV1 = col_integer(),
    DAMTYP2 = col_integer(),
    DAMSEV2 = col_integer(),
    ACTUALHT = col_double(),
    HT = col_double(),
    DIA = col_double(),
    MORTYR = col_double(),
    INVYR = col_double()
  )
)

plot_raw <- read_csv(
  here("data/rawdat/state/RI_PLOT.csv"),
  col_types = cols(
    CN = col_character()
  )
)

plotgeom_raw <- read_csv(
  here("data/rawdat/state/RI_PLOTGEOM.csv"),
  col_types = cols(
    CN = col_character()
  )
)

#needed later
cond_raw <- read_csv(
  here("data/rawdat/state/RI_COND.csv"),
  col_types = cols(
    CN = col_character(),
    PLT_CN = col_character(),
    NBR_LIVE_STEMS = col_integer(),
    LAND_COVER_CLASS_CD_RET = col_integer(),
    TRTYR2 = col_integer(),
    DSTRBYR2 = col_integer()
  )
)
```

# Initial Wrangling

## Tree table

Tree table gets filtered to only year 2000 and onward, the `CN` column is renamed to be more specific, and composite IDs are created that should be universally unique (not just unique within the plot or state)

```{r}
tree <- tree_raw |> 
  filter(INVYR >= 2000.0) |> 
  rename(TREE_CN = CN) |> 
  mutate(
    PLOT_COMPOSITE_ID = paste(STATECD, UNITCD, COUNTYCD, PLOT, sep = "_"),
    TREE_COMPOSITE_ID = paste(STATECD, UNITCD, COUNTYCD, PLOT, SUBP, TREE, sep = "_"),
    .before = 1
  )

```

It is my understanding that the `TREE_COMPOSITE_ID` is now consistent through time as well since the combination of state, unit, county, plot, sub-plot, and tree number are unique for each tree and the same every inventory.
But if that's try, what does the `chain_by_joins()` function do??

### Chain by joins

::: callout-important
## Question

It looks like `chain_by_joins()` adds a `TREE_FIRST_CN` column that connects every observation to the first `CN` a tree was given.
Is this column needed?
Or is `TREE_COMPOSITE_ID` enough?

Answer: I found references in Renata's notes to two methods for creating unique keys for trees and that they work equally well for *most* trees but sometimes disagree.
I wonder if sometimes trees at the border of plots "move" plots between years or something like that?
:::

## Plot table

I need to join one column from the PLOTGEOM table (`ECOSUBCD`) that is needed for the carbon estimation code (it used to be in the PLOT table in older versions of FIADB)

We also do similar filtering and renaming as in the tree table

```{r}
#only care about keys and the ECOSUBCD column
plotgeom <- plotgeom_raw |> select(CN, INVYR, ECOSUBCD)
plot <- left_join(plot_raw,
                  plotgeom,
                  by = join_by(CN, INVYR)) |>
  filter(INVYR >= 2000.0) |>
  rename(PLT_CN = CN) |>
  mutate(
    PLOT_COMPOSITE_ID = paste(STATECD, UNITCD, COUNTYCD, PLOT, sep = "_"),
    .before = 1
  )
```

## Cond table

Needed later on for carbon estimation

```{r}
cond <-
  cond_raw |>
  filter(INVYR >= 2000.0) |>
  rename(COND_CN = CN) |>
  mutate(
    PLOT_COMPOSITE_ID = paste(STATECD, UNITCD, COUNTYCD, PLOT, sep = "_"),
    .before = 1
  )
```

# Annualizing

I'm skipping some steps in `create_all_tables.R`, but I don't think they're all necessary.
This section would replace what goes on in `add_annual_estimates_to_db.R`, which I think is probably overly complicated and has the issue of not working when a tree goes "missing" for a survey.

First, `ACTUALHT` and `HT` get coalesced.
If I remember correctly, `ACTUALHT` only applies when a tree is broken, and we want to use that value for carbon estimation if it exists.

```{r}
tree <- 
  tree |> 
  mutate(ACTUALHT = coalesce(ACTUALHT, HT)) |> 
  select(ACTUALHT, HT, everything())
```

Maybe I'm not understanding something that the code needs to do, but I think we can just \~\~use the built-in R function for linear interpolation, `approx()`.

Let's try an example

### Toy Example

```{r}
#| label: toy-data
df <- tibble::tribble(
  ~TREE_COMPOSITE_ID, ~YEAR, ~HT, ~STATUSCD,
  1, 2000, 20, 1,
  1, 2005, 30, 1,
  1, 2010, 37, 1,
  1, 2015, 45, 2,
  2, 2000, 5, 1,
  2, 2005, NA, NA,
  2, 2010, NA, NA,
  2, 2015, 20, 1,
  2, 2020, 32, 1,
  3, 2000, NA, 2,
  4, 2000, 10, 1,
  4, 2005, 14, 1,
  4, 2010, NA, 2
)

```

There are two trees each measured every 5 years.
Tree 1 was measured in 4 surveys, the last of which it was dead.
Tree 2 was missing for two surveys, and then found again still alive.
Tree 3 was only recorded once and it was already dead in the first survey.

First we need to expand it to include all years between surveys.

```{r}
#| label: toy-expand
all_yrs <-
  df |>
  group_by(TREE_COMPOSITE_ID) |>
  expand(YEAR = full_seq(YEAR, 1))

df_all_yrs <- right_join(df, all_yrs) |> arrange(TREE_COMPOSITE_ID, YEAR)
df_all_yrs
```

Then, I think we just need to use `approx()` in a `mutate()` call, but let's make a "friendlier" version that returns a vector and does nothing when it can't interpolate (i.e. it needs at least 2 non-`NA` values to interpolate).

We also want linear *extrapolation* of trailing `NA`s in the case that a "mort tree" (tree first recorded dead) has no observations for `DIA` or `HT`.
That is accomplished with `Hmisc::approxExtrap()`, but needs a continuous set of numbers created by `approx()` to start with.

```{r}
#| label: interpolate-function
inter_extra_polate <- function(x, y) {
  if (sum(!is.na(y)) < 2){
    return(y)
  } else {
    #first interpolate
    interpolated <- approx(x, y, xout = x)$y
  }
  #then extrapolate trailing NAs if needed
  if (all(!is.na(interpolated))) {
    return(interpolated)
  } else {
    extrapolated <- 
      Hmisc::approxExtrap(
        x = x[!is.na(interpolated)],
        y = interpolated[!is.na(interpolated)],
        xout = x[is.na(interpolated)]
      )$y
    return(c(interpolated[!is.na(interpolated)], extrapolated))
  }
}
```

```{r}
#| label: toy-interpolate
df_interpolated <- df_all_yrs |> 
  group_by(TREE_COMPOSITE_ID) |> 
  mutate(HT_interpolated = inter_extra_polate(x = YEAR, y = HT))
df_interpolated
```

Yeah, that seems to have done it!
Then we can just cut off any dead trees at the estimated mortality year.

```{r}
#| label: toy-mortyr
df_interpolated <- 
  df_interpolated |> 
  group_by(TREE_COMPOSITE_ID) |> #for each tree...
  #figure out when it was last recorded alive and first recorded dead
  mutate(
    last_live = YEAR[max(which(STATUSCD == 1))],
    first_dead = YEAR[min(which(STATUSCD == 2))]
  ) |> 
  #estimate the mortality year as the midpoint between surveys
  mutate(
    dead_yr = ceiling(mean(c(last_live, first_dead))),
    last_yr = if_else(!is.na(dead_yr), dead_yr, max(YEAR))
  ) |> 
  #remove estimates after death
  filter(YEAR <= last_yr) |> 
  select(-last_live, -first_dead, -dead_yr, -last_yr)
```

```{r}
#| label: toy-plot
library(ggplot2)
ggplot(df_interpolated, aes(x = YEAR)) +
  geom_point(aes(y = HT)) +
  geom_line(aes(y = HT_interpolated)) +
  facet_wrap(vars(TREE_COMPOSITE_ID))
```

### Actual data

It *might* be trickier to do with the real data because:

1.  We might need to "annualize" the `TREE_CN` key, which is different for each inventory year for the same `TREE_COMPOSITE_ID`
2.  Some, but not many, trees have a recorded `MORTYR`, which we'd like to (optionally) use instead of the midpoint between surveys as an estimated end to that tree's timeseries.

Renata's code only interpolates/extrapolates `DIA`, `HT`, and `ACTUALHT` and other variables needed for carbon estimation are added later with joins.
I'm not sure that's the best approach, especially since some of the other variables used (e.g. `CULL`, the precentage of rotten wood) are continuous and could also be linearly interpolated.
I'm going to try doing the necessary joins *first* and then annualizing.

Variable used by carbon estimation code in `add_carbon_variables_*.R`:

Interpolation needed:

-   `CR` - `tree` table; compacted crown ratio (interpolate)
-   `DIA` - `tree` table; diameter (interpolate)
-   `HT` - `tree` table; height (interpolate)
-   `ACTUALHT` - `tree` table; height accounting for broken tops (interpolate)
-   `CULL` - `tree` table; rotten and missing cull, a percentage (interpolate)
-   `STATUSCD` - `tree` table; alive (1) or dead (2)
-   `DECAYCD` - `tree` table; needed for joining to `REF_TREE_DECAY_PROP`, unclear how to interpolate as it is categorical.
-   `STDORGCD` - `cond` table; stand origin code, method of stand regeneration for trees in the condition (2.5.25) (categorical)

Invariant; join *after* interpolation:

-   `CULL_DECAY_RATIO` - this is a weird oneâ€”it's the `DENSITY_PROP` value from the `REF_TREE_DECAY_PROP` table when `DECAYCD = 3`.  I do not know why, but it's in the David Walker code like this.
-   `ECOSUBCD` - `plot` table; ecological subsection code (invariant)
-   `SPCD` - `REF_SPECIES` table; species code (invariant)
-   `SFTWD_HRDWD` - `REF_SPECIES` table; softwood or hardwood (invariant)
-   `JENKINS_SPGRPCD` - `REF_SPECIES` table; species group code (invariant)
-   `WDSG` - renamed from `WOOD_SPGR_GREENVOL_DRYWT` in `REF_SPECIES` table; green specific gravity of wood based on volume attributes in the `tree` table (invariant)

There are some trees in the `tree` table that were dead on their first survey and don't have any height or diameter measurements.
We should get rid of these.

```{r}
#| label: tree-filter-always-dead
tree <- tree |> 
  group_by(TREE_COMPOSITE_ID) |> 
  filter(!(all(is.na(DIA)) |
             all(is.na(ACTUALHT)) |
             all(is.na(HT)) |
             all(STATUSCD != 1)))
```


::: callout-important
## Question

Why do some trees change species between surveys?
I assume they were misidentified at some point, but what should we do about it?
Keep the last ID maybe?

```{r}
tree |> 
  group_by(TREE_COMPOSITE_ID) |> 
  summarize(n_SPCD = length(unique(SPCD))) |> 
  filter(n_SPCD > 1)

tree |> 
  group_by(TREE_COMPOSITE_ID) |> 
  filter(length(unique(SPCD))>1) |> 
  select(TREE_COMPOSITE_ID, INVYR, SPCD) |> 
  arrange(TREE_COMPOSITE_ID, INVYR)
```

For now I'll just keep the last ID

```{r}
tree <- tree |> 
  group_by(TREE_COMPOSITE_ID) |> 
  mutate(SPCD = last(SPCD)) 
```
:::

#### Interpolation & Extrapolation

First, interpolate/extrapolate continuous variables

```{r}
tree_to_interpolate <- tree |> 
  select(
    TREE_COMPOSITE_ID,
    PLOT_COMPOSITE_ID,
    SPCD,
    INVYR,
    DIA,
    HT,
    ACTUALHT,
    CR,
    CULL,
    STATUSCD,
    MORTYR,
    DECAYCD
  )
```

First, expand to include all years

```{r}
#| label: tree-expand

# this needs to include all columns that are invariant over time
all_yrs <- tree_to_interpolate |> 
  group_by(TREE_COMPOSITE_ID, PLOT_COMPOSITE_ID, SPCD) |>
  expand(YEAR = full_seq(INVYR, 1))

tree_annual <- 
  right_join(
    tree_to_interpolate,
    all_yrs,
    by = join_by(TREE_COMPOSITE_ID, PLOT_COMPOSITE_ID, SPCD, INVYR == YEAR)
  ) |>
  arrange(TREE_COMPOSITE_ID, INVYR) |> 
  rename(YEAR = INVYR)
tree_annual
```

Then interpolate with our custom `approx()` wrapper function, `inter_extra_polate()`

```{r}
#| label: tree-interpolate
tree_interpolated <- 
  tree_annual |> 
  group_by(TREE_COMPOSITE_ID) |> 
  mutate(across(c(ACTUALHT, DIA, HT, CULL, CR),
                \(var) inter_extra_polate(x = YEAR, y = var)
                ))
tree_interpolated
```

#### Estimate mortality
Then we need to determine the year trees died.

```{r}
#| label: tree-mortyr

#NOTE: some of these `if_else()` could be replaced with `coalesce()`, but `if_else()` might be more explicit and readable

tree_annualized <- 
  tree_interpolated |> 
  group_by(TREE_COMPOSITE_ID) |> #for each tree...
  #figure out when it was last recorded alive and first recorded dead
  mutate(
    last_live = YEAR[max(which(STATUSCD == 1))],
    first_dead = YEAR[min(which(STATUSCD == 2))]
  ) |> 
  #estimate the mortality year as the midpoint between surveys
  mutate(
    dead_yr = ceiling(mean(c(last_live, first_dead))),
    #if dead_yr is NA still (because it was never alive and mean(c(NA, first_dead)) is NA), then just use the first_dead year
    dead_yr = if_else(is.na(dead_yr), first_dead, dead_yr),
    last_yr = if_else(!is.na(dead_yr), dead_yr, max(YEAR))
  ) |> 
  #use MORTYR data if it exists
  mutate(
    last_yr = if_else(!is.na(MORTYR), MORTYR, last_yr)
  ) |> 
  #remove any rows after estimated death year
  filter(YEAR <= last_yr) |> 
  #clean up temporary columns
  select(-last_live, -first_dead, -dead_yr, -last_yr) |> 
  #I think we also don't need MORTYR and STATUSCD.  If users want those, they could join to the tree table, but they don't make sense in this annualized table
  select(-MORTYR, -STATUSCD)

```

There are some trees where interpolation fails.
I suspect they are all ones with only one non-NA measurement and there is nothing we can do.

```{r}
failed_to_interpolate <- 
  tree_annualized |> 
  filter(any(is.na(DIA))) |>
  pull(TREE_COMPOSITE_ID) |>
  unique()
tree |> 
  group_by(TREE_COMPOSITE_ID) |> 
  filter(!all(STATUSCD != 1)) |> 
  filter(TREE_COMPOSITE_ID %in% failed_to_interpolate) |>
  arrange(TREE_COMPOSITE_ID, INVYR) |> 
  select(TREE_COMPOSITE_ID, INVYR, STATUSCD, DIA, ACTUALHT, everything())
```

```{r}
tree_annualized
```


#### Columns from the `REF_SPECIES` table

Join in time-invariant columns that are required for carbon estimation

```{r}
# REF_SPECIES table variables
ref_species_raw <- read_csv(here("data/rawdat/REF_SPECIES.csv"))
ref_species <- ref_species_raw |> 
  select(SPCD,
         JENKINS_SPGRPCD, 
         SFTWD_HRDWD, 
         WDSG = WOOD_SPGR_GREENVOL_DRYWT)
tree_annualized <- left_join(tree_annualized, ref_species, by = join_by(SPCD))
```


#### `ECOSUBCD` from the `plot` table

```{r}
plot_ecosubcds <- plot |>
  select(PLOT_COMPOSITE_ID, ECOSUBCD) |>
  distinct()

tree_annualized <- left_join(tree_annualized, plot_ecosubcds, by = join_by(PLOT_COMPOSITE_ID))
```

#### `STDORGCD` from the `cond` table

```{r}
std_org_codes <- cond |> 
  select(PLOT_COMPOSITE_ID, STDORGCD) |> 
  #replace NAs with 0s (I think assuming that no data means it is natural regeneration)
  mutate(STDORGCD = if_else(is.na(STDORGCD), 0, STDORGCD)) |> 
  distinct()

# tree_annualized <- 
  left_join(
    tree_annualized,
    std_org_codes,
    by = join_by(PLOT_COMPOSITE_ID)
  ) #hm...
```

::: callout-important
## Question

```{r}
std_org_codes |> 
  count(PLOT_COMPOSITE_ID) |> filter(n>1)
```

Why would a plot have multiple values for STDORGCD?

```{r}
cond |> 
  filter(PLOT_COMPOSITE_ID == "44_1_9_149") |> 
  mutate(STDORGCD = if_else(is.na(STDORGCD), 0, STDORGCD)) |> 
  select(INVYR, COND_CN, PLT_CN, STDORGCD, COND_STATUS_CD)
```

```{r}
cond_ri_raw <- read_csv(here("data/rawdat/state/RI_COND.csv"))
cond_ri_raw |> 
  filter(PLT_CN %in% c(55944501010538, 120044589010661, 14527782020004,602592947126144))
```

Possibly our assumption that `NA` = 0 is incorrect?

For now, I'll just pick the first one

```{r} 
tree_annualized <-
  left_join(
    tree_annualized,
    std_org_codes |> slice_head(n = 1, by = PLOT_COMPOSITE_ID),
    by = join_by(PLOT_COMPOSITE_ID)
  )
```
:::


#### REF_TREE_DECAY_PROP

::: callout-important
## Question

I'm not sure what's going on here, but it *looks* like the code creates a new column called `CULL_DECAY_RATIO` using the `DENSITY_PROP` column for `DECAYCD` 3.
Then later it looks like this is overwritten if the tree is NOT alive (`STATUSCD!=1`) to be 1.
There are no notes in the code (either Renata's or David Walker's) indicating why this is done.
`DECAYCD` 3:

> Only limb stubs exist; the top is broken; a variable amount of bark remains; sapwood is sloughing; heartwood has advanced decay in upper bole and is beginning at the base.
:::

```{r}
ref_tree_decay_prop <- read_csv(here("data/rawdat/REF_TREE_DECAY_PROP.csv"))
ref_tree_carbon_ratio_dead <- read_csv(here("data/rawdat/REF_TREE_CARBON_RATIO_DEAD.csv"))
```


```{r}
tree_annualized <- 
  tree_annualized |> 
  ungroup() |> 
  #first joins by SFTWD_HRDWD only the DENSITY_PROP column for DECAYCD 3, but calls it CULL_DECAY_RATIO
  left_join(
    ref_tree_decay_prop |>
      filter(DECAYCD == 3) |>
      select(
        SFTWD_HRDWD,
        CULL_DECAY_RATIO = DENSITY_PROP
      ),
    by = join_by(SFTWD_HRDWD) 
  ) |> 
  #then joins additional columns (including DENSITY_PROP) based on DECAYCD and SFTWD_HRDWD
  left_join(
    ref_tree_decay_prop |>
      select(SFTWD_HRDWD,
             DECAYCD,
             DENSITY_PROP,
             BARK_LOSS_PROP,
             BRANCH_LOSS_PROP),
    by = join_by(DECAYCD, SFTWD_HRDWD)
  ) |> 
  #then join to the carbon ratio table to get CARBON_RATIO
  left_join(
    ref_tree_carbon_ratio_dead |>
      select(SFTWD_HRDWD, DECAYCD, CARBON_RATIO),
    by = join_by(DECAYCD, SFTWD_HRDWD)
  ) 
```


#### Additional wrangling

`NA`s for `CULL` get replaced with 0s (not entirely sure why, but assumes that no data = 100% live wood)

```{r}
tree_annualized <- tree_annualized |> 
  mutate(CULL = ifelse(is.na(CULL), 0, CULL))
```


TODO: figure out how to interpolate DECAYCD.  Notes in midpoint_step_categorical.R


### Visualize results

Let's take a sample of trees and visualize them.

```{r}
set.seed(123)

tree_sample <- tree_annualized |> pull(TREE_COMPOSITE_ID) |> unique() |> sample(50)
tree_subset <- tree_annualized |>
  filter(TREE_COMPOSITE_ID %in% tree_sample)
tree_subset |> 
  select(TREE_COMPOSITE_ID, YEAR, DIA, HT, ACTUALHT, CR, CULL) |> 
  pivot_longer(DIA:CULL, names_to = "variable") |> 
  ggplot(aes(x = YEAR, y = value, color = TREE_COMPOSITE_ID)) +
  facet_wrap(vars(variable), scales = "free_y") +
  geom_line(show.legend = FALSE)
```
This makes me think about caveats of interpolation since it's not really appropriate to linearly interpolate ACTUALHTâ€”trees tops don't break off linearly.

# Carbon estimation

Here's where we use the functions in `carbon_code/` to estimate carbon and AGB.

I'll be trying to replicate the code in `R/add_carbon_variables_mortyr.R`


```{r}
nsvb_vars |> ungroup() |> count(DECAYCD)
```

```{r}
nsvb_vars <- 
  nsvb_vars |> 
  ungroup() |> 
  #first joins by SFTWD_HRDWD only the DENSITY_PROP column for DECAYCD 3, but calls it CULL_DECAY_RATIO
  left_join(
    ref_tree_decay_prop |>
      filter(DECAYCD == 3) |>
      select(
        SFTWD_HRDWD,
        CULL_DECAY_RATIO = DENSITY_PROP
      ),
    by = join_by(SFTWD_HRDWD) 
  ) |> 
  #then joins additional columns (including DENSITY_PROP) based on DECAYCD and SFTWD_HRDWD
  left_join(
    ref_tree_decay_prop |>
      select(SFTWD_HRDWD,
             DECAYCD,
             DENSITY_PROP,
             BARK_LOSS_PROP,
             BRANCH_LOSS_PROP),
    by = join_by(DECAYCD, SFTWD_HRDWD)
  ) |> 
  #then join to the carbon ratio table to get CARBON_RATIO
  left_join(
    ref_tree_carbon_ratio_dead |>
      select(SFTWD_HRDWD, DECAYCD, CARBON_RATIO),
    by = join_by(DECAYCD, SFTWD_HRDWD)
  ) 
```

What happened with all the rows that had `NA` for `DECAYCD`?

```{r}
nsvb_vars |> 
  filter(is.na(DECAYCD)) |> 
  select(CARBON_RATIO, DENSITY_PROP, BARK_LOSS_PROP, BRANCH_LOSS_PROP, STATUSCD, CULL_DECAY_RATIO, everything())
```

All those joined variables are also `NA`.
Seems like maybe it doesn't matter though because they will be filled in later on if `STATUSCD==1` .

::: callout-important
## Question

Why does `CULL_DECAY_RATIO` get set to 1 for trees that are dead?
I think maybe the `CULL_DECAY_RATIO` variable is just poorly named.
It comes from a value for `DENSITY_PROP` which is:

> Density proportion.
> The proportion of the tree remaining after deductions for decay

So, a dead tree should be 100% decay.
(But why are live trees not 0% decay or just use their `DECAYCD` appropriate value for `CULL_DECAY_RATIO` ???)
:::

Create more variables needed for carbon estimation

```{r}
nsvb_vars <- 
  nsvb_vars |>
  mutate(
    CULL_DECAY_RATIO = if_else(STATUSCD == 1, CULL_DECAY_RATIO, 1),
    STANDING_DEAD_CD = if_else(STATUSCD == 1, 0, STANDING_DEAD_CD),
    # TODO: why is this important?  Why not just use NA?
    DECAYCD = if_else(STATUSCD == 1, 0, DECAYCD),
    # TODO: why are these variables created?
    DECAY_WD = if_else(STATUSCD == 1, 1, DENSITY_PROP),
    DECAY_BK = if_else(STATUSCD == 1, 1, BARK_LOSS_PROP),
    DECAY_BR = if_else(STATUSCD == 1, 1, BRANCH_LOSS_PROP),
    #TODO: why is this called C_FRAC if it is a percentage?
    C_FRAC = if_else(STATUSCD == 1,
                     CARBON_RATIO_LIVE * 100,
                     CARBON_RATIO * 100),
    # the & here is && in renata's code, which shouldn't work but does for reasons I don't understand
    DEAD_AND_STANDING = STATUSCD == 2 & STANDING_DEAD_CD == 1,
    LIVE = STATUSCD == 1
  )
```

Filtering

::: callout-important
## Question

Why do we filter to exclude trees that are not alive or dead and standing?
Why only include `COND_STATUS_CD` 1 (accessible forest land)?
This removes 1,627 rows for RI
:::

```{r}
nsvb_vars <- nsvb_vars |> 
      filter(COND_STATUS_CD == 1, DEAD_AND_STANDING | LIVE)
```

Clean up unused columns.

```{r}
nsvb_vars <- nsvb_vars |> 
  # rename(TRE_CN = TREE_CN) |> #still not sure we need this or why it is renamed
  select(
    -CONDID,
    -COND_STATUS_CD,
    -CARBON_RATIO_LIVE,
    -CARBON_RATIO,
    -DENSITY_PROP,
    -BARK_LOSS_PROP,
    -BRANCH_LOSS_PROP,
    -DEAD_AND_STANDING,
    -LIVE
  ) 
```

# 
