---
title: "Calculating Annualized Carbon Estimates"
author: "Eric Scott"
format: gfm
toc: true
---

```{r}
#| label: setup
#| message: false

library(readr)
library(dplyr)
# library(dtplyr)
library(tidyr)
library(here)
library(purrr)
library(ggplot2)

```

I'm going to try to work through a small sample of data to figure out how the code in forestTIME-builder works

# Read in data

I'll use CO as an example.
Some of the columns get auto-detected as the wrong type (e.g. CN should be character, not numeric, even though it looks like a number).
I got these column types from the Green Book and recorded them in a list in `scripts/create_column_types.R`.  The list is designed for duckdb functions, so here I convert them to a form that works with `readr`.

```{r}
col_types <- read_rds(here("data/rawdat/table_types.rds"))
col_types_readr <- col_types |> 
  map(\(v) { #for every vector element of col_types...
    as.list(v) |> #convert to list
      #then modify to replace with readr col_*() column specification functions
      modify_at(which(v == "STRING"), \(x) col_character()) |> 
      modify_at(which(v == "INTEGER"), \(x) col_integer()) |> 
      modify_at(which(v == "DOUBLE"), \(x) col_double())
  })
```


```{r}
tree_raw <- read_csv(
  here("data/rawdat/state/CO_TREE.csv"),
  col_types = col_types_readr$tree_types
)

plot_raw <- read_csv(
  here("data/rawdat/state/CO_PLOT.csv"),
  col_types = col_types_readr$plot_types
)

plotgeom_raw <- read_csv(
  here("data/rawdat/state/CO_PLOTGEOM.csv"),
  col_types = col_types_readr$plotgeom_types
) 

#needed later
cond_raw <- read_csv(
  here("data/rawdat/state/CO_COND.csv"),
  col_types = col_types_readr$cond_types
)
```

# Initial Wrangling

## Tree table

Tree table gets filtered to only year 2000 and onward, the `CN` column is renamed to be more specific, and composite IDs are created that should be universally unique (not just unique within the plot or state)

```{r}
tree <- tree_raw |> 
  filter(INVYR >= 2000.0) |> 
  rename(TREE_CN = CN) |> 
  mutate(
    PLOT_COMPOSITE_ID = paste(STATECD, UNITCD, COUNTYCD, PLOT, sep = "_"),
    TREE_COMPOSITE_ID = paste(STATECD, UNITCD, COUNTYCD, PLOT, SUBP, TREE, sep = "_"),
    .before = 1
  )
```

It is my understanding that the `TREE_COMPOSITE_ID` is now consistent through time as well since the combination of state, unit, county, plot, sub-plot, and tree number are unique for each tree and the same every inventory.

## Plot table

I need to join one column from the PLOTGEOM table (`ECOSUBCD`) that is needed for the carbon estimation code (it used to be in the PLOT table in older versions of FIADB)

We also do similar filtering and renaming as in the tree table

```{r}
#only care about keys and the ECOSUBCD column
plotgeom <- plotgeom_raw |> select(CN, INVYR, ECOSUBCD)
plot <- left_join(plot_raw,
                  plotgeom,
                  by = join_by(CN, INVYR)) |>
  filter(INVYR >= 2000.0) |>
  rename(PLT_CN = CN) |>
  mutate(
    PLOT_COMPOSITE_ID = paste(STATECD, UNITCD, COUNTYCD, PLOT, sep = "_"),
    .before = 1
  )
```

## Cond table

Needed later on for carbon estimation

```{r}
cond <-
  cond_raw |>
  filter(INVYR >= 2000.0) |>
  rename(COND_CN = CN) |>
  mutate(
    PLOT_COMPOSITE_ID = paste(STATECD, UNITCD, COUNTYCD, PLOT, sep = "_"),
    .before = 1
  )
```

# Annualizing

I'm skipping some steps in `create_all_tables.R`, but I don't think they're all necessary.
This section would replace what goes on in `add_annual_estimates_to_db.R`, which I think is probably overly complicated and has the issue of not working when a tree goes "missing" for a survey.

First, `ACTUALHT` and `HT` get coalesced.
If I remember correctly, `ACTUALHT` only applies when a tree is broken, and we want to use that value for carbon estimation if it exists.

```{r}
tree <- 
  tree |> 
  mutate(ACTUALHT = coalesce(ACTUALHT, HT)) |> 
  select(ACTUALHT, HT, everything())
```

Maybe I'm not understanding something that the code needs to do, but I think we can just use the built-in R function for linear interpolation, `approx()`.

Let's try an example

### Toy Example

```{r}
#| label: toy-data
df <- tibble::tribble(
  ~TREE_COMPOSITE_ID, ~YEAR, ~HT, ~STATUSCD, ~DECAYCD, ~MORTYR,
  1, 2000, 20, 1, NA, NA,
  1, 2005, 30, 1, NA, NA,
  1, 2010, 37, 1, NA, NA,
  1, 2015, 45, 2, 2, 2011,
  1, 2020, 33, 2, 3, NA,
  2, 2000, 5, 1, NA, NA,
  2, 2005, NA, NA, NA, NA,
  2, 2010, NA, NA, NA, NA,
  2, 2015, 20, 1, NA, NA,
  2, 2020, 32, 1, NA, NA,
  3, 2000, NA, 2, 2, NA,
  4, 2000, 10, 1, NA, NA,
  4, 2005, 14, 1, NA, NA,
  4, 2010, NA, 2, 2, NA
)

```

There are two trees each measured every 5 years.
Tree 1 was measured in 4 surveys, the last of which it was dead.
Tree 2 was missing for two surveys, and then found again still alive.
Tree 3 was only recorded once and it was already dead in the first survey.

First we need to expand it to include all years between surveys.

```{r}
#| label: toy-expand
all_yrs <-
  df |>
  group_by(TREE_COMPOSITE_ID) |>
  expand(YEAR = seq.int(min(YEAR, na.rm = TRUE), max(YEAR, na.rm = TRUE)))
  # expand(YEAR = full_seq(YEAR, 1))

df_all_yrs <- right_join(df, all_yrs) |> arrange(TREE_COMPOSITE_ID, YEAR)
df_all_yrs
```

Then, I think we just need to use `approx()` in a `mutate()` call, but let's make a "friendlier" version that returns a vector and does nothing when it can't interpolate (i.e. it needs at least 2 non-`NA` values to interpolate).

We also want linear *extrapolation* of trailing `NA`s in the case that a "mort tree" (tree first recorded dead) has no observations for `DIA` or `HT`.
That is accomplished with `Hmisc::approxExtrap()`, but needs a continuous set of numbers created by `approx()` to start with.

```{r}
#| label: interpolate-function

source(here("R/inter_extra_polate.R"))
source(here("R/step_interp.R"))

```

```{r}
#| label: toy-interpolate
df_interpolated <- df_all_yrs |> 
  group_by(TREE_COMPOSITE_ID) |> 
  mutate(HT_interp = inter_extra_polate(x = YEAR, y = HT), .after = HT)
df_interpolated
```

Yeah, that seems to have done it!

Now let's try a categorical variable like `STATUSCD` and `DECAYCD`

```{r}
df_interpolated <- df_interpolated |> 
  group_by(TREE_COMPOSITE_ID) |> 
  mutate(STATUSCD_interp = step_interp(STATUSCD), .after = STATUSCD) |> 
  mutate(DECAYCD_interp = step_interp(DECAYCD), .after = DECAYCD)
df_interpolated
```

But in the case of a recorded `MORTYR`, we actually want `STATUSCD` to switch to 2 not in the midpoint

```{r}
df_interpolated |> 
  group_by(TREE_COMPOSITE_ID) |> 
  mutate(
    first_dead = if_else(
      condition = any(!is.na(MORTYR)), #has recorded MORTYR
      true = max(MORTYR, na.rm = TRUE),
      false = YEAR[min(which(STATUSCD == 2))]
    )
  ) |> 
  #then adjust STATUSCD & DECAYCD
  mutate(STATUSCD_interp = if_else(YEAR >= first_dead, 2, STATUSCD_interp)) |>
  #MORTYR might be earlier than the midpoint, so backfill NAs for DECAYCD
  fill(DECAYCD_interp, .direction = "up") |> 
  #But, decay only applies to dead trees
  mutate(DECAYCD_interp = if_else(STATUSCD_interp == 2, DECAYCD_interp, NA))
```


```{r}
#| label: toy-mortyr
df_interpolated <- 
  df_interpolated |> 
  group_by(TREE_COMPOSITE_ID) |> #for each tree...
  #figure out when it was last recorded alive and first recorded dead
  mutate(
    last_live = YEAR[max(which(STATUSCD == 1))],
    first_dead = YEAR[min(which(STATUSCD == 2))]
  ) |> 
  #estimate the mortality year as the midpoint between surveys
  mutate(
    dead_yr = ceiling(mean(c(last_live, first_dead))),
    last_yr = if_else(!is.na(dead_yr), dead_yr, max(YEAR))
  ) |> 
  #remove estimates after death
  filter(YEAR <= last_yr) |> 
  select(-last_live, -first_dead, -dead_yr, -last_yr)
```

```{r}
#| label: toy-plot
library(ggplot2)
ggplot(df_interpolated, aes(x = YEAR)) +
  geom_point(aes(y = HT)) +
  geom_line(aes(y = HT_interp)) +
  facet_wrap(vars(TREE_COMPOSITE_ID))
```

### Actual data

It *might* be trickier to do with the real data because:

1.  We might need to "annualize" the `TREE_CN` key, which is different for each inventory year for the same `TREE_COMPOSITE_ID`
2.  Some, but not many, trees have a recorded `MORTYR`, which we'd like to (optionally) use instead of the midpoint between surveys as an estimated end to that tree's timeseries.

Renata's code only interpolates/extrapolates `DIA`, `HT`, and `ACTUALHT` and other variables needed for carbon estimation are added later with joins.
I'm not sure that's the best approach, especially since some of the other variables used (e.g. `CULL`, the precentage of rotten wood) are continuous and could also be linearly interpolated.
I'm going to try doing the necessary joins *first* and then annualizing.

Variable used by carbon estimation code in `add_carbon_variables_*.R`:

Interpolation needed:

-   `CR` - `tree` table; compacted crown ratio (interpolate)
-   `DIA` - `tree` table; diameter (interpolate)
-   `HT` - `tree` table; height (interpolate)
-   `ACTUALHT` - `tree` table; height accounting for broken tops (interpolate)
-   `CULL` - `tree` table; rotten and missing cull, a percentage (interpolate)
-   `STATUSCD` - `tree` table; alive (1) or dead (2)
-   `DECAYCD` - `tree` table; needed for joining to `REF_TREE_DECAY_PROP` (categorical). `NA` for live trees, 1-5 for dead trees
-   `STANDING_DEAD_CD` - `tree` table; `NA` for live trees, 0 or 1 for dead trees.
-   `STDORGCD` - `cond` table; stand origin code, method of stand regeneration for trees in the condition (2.5.25) (categorical). This is also `NA` sometimes, but here I think it is safe to assume that `NA` can be replaced with `0` (natural stands).
-   `COND_STATUS_CD` - `cond` table; eventually for carbon estimation only trees in 'accessible forest land' (`COND_STATUS_CD == 1`) are kept (not sure why)
-   `CONDID` - `tree` table; key for joining to `cond` table? Not needed for carbon estimation, but needed for scaling to population I think (used in rFIA code).

Invariant; join *after* interpolation or just `fill()` to complete:

-   `CULL_DECAY_RATIO` - this is a weird one—it's the `DENSITY_PROP` value from the `REF_TREE_DECAY_PROP` table when `DECAYCD = 3`. I do not know why, but it's in the David Walker code like this.
-   `ECOSUBCD` - `plot` table; ecological subsection code (invariant)
-   `SPCD` - `REF_SPECIES` table; species code (invariant[^1])
-   `SFTWD_HRDWD` - `REF_SPECIES` table; softwood or hardwood (invariant)
-   `JENKINS_SPGRPCD` - `REF_SPECIES` table; species group code (invariant)
-   `WDSG` - renamed from `WOOD_SPGR_GREENVOL_DRYWT` in `REF_SPECIES` table; green specific gravity of wood based on volume attributes in the `tree` table (invariant)
-   `CARBON_RATIO_LIVE` - `REF_SPECIES` table; wood carbon fraction (invariant)
-   `CARBON_RATIO` - `REF_TREE_CARBON_RATIO_DEAD` table; wood carbon fraction of dead trees (invariant)


There are some trees in the `tree` table that were dead on their first survey and don't have any height or diameter measurements.
We should get rid of these.


```{r}
#| label: tree-filter-always-dead
tree <- tree |> 
  group_by(TREE_COMPOSITE_ID) |> 
  filter(!(all(is.na(DIA)) |
             all(is.na(ACTUALHT)) |
             all(is.na(HT)) |
             all(STATUSCD != 1)))
```

I'll also drop trees that change species (for now)

```{r}
# drop trees with more than 1 SPCD
tree <- tree |> 
  group_by(TREE_COMPOSITE_ID) |> 
  filter(length(unique(SPCD)) == 1)
```

::: callout-important
## Question

Taking a look at trees with a recorded `MORTYR`.  One obvious question is what to do with trees that are recorded as alive in the inventory that takes place in their `MORTYR`. https://github.com/mekevans/forestTIME-builder/issues/61

```{r}
tree |> 
  group_by(TREE_COMPOSITE_ID) |> 
  filter(any(!is.na(MORTYR)) & n() > 1) |> 
  arrange(TREE_COMPOSITE_ID, INVYR) |> 
  select(TREE_COMPOSITE_ID, INVYR, MORTYR, STATUSCD, DECAYCD, STANDING_DEAD_CD, everything())
```
:::

Join `CONDID` from the `COND` table, assuming that an `NA` for `STDORGCD` is equivalent to a 0

```{r}
cond_cols <- cond |> 
  select(PLOT_COMPOSITE_ID, INVYR, CONDID, COND_STATUS_CD, STDORGCD) |> 
  mutate(STDORGCD = if_else(is.na(STDORGCD), 0, STDORGCD))

tree <- 
  left_join(tree, cond_cols,
            by = c("PLOT_COMPOSITE_ID", "INVYR", "CONDID"))
```


#### Interpolation & Extrapolation

First, interpolate/extrapolate continuous variables

```{r}
tree_to_interpolate <- tree |> 
  select(
    TREE_COMPOSITE_ID,
    PLOT_COMPOSITE_ID,
    SPCD,
    INVYR,
    DIA,
    HT,
    ACTUALHT,
    CR,
    CULL,
    STATUSCD,
    MORTYR,
    DECAYCD,
    STANDING_DEAD_CD,
    STDORGCD,
    CONDID,
    COND_STATUS_CD
  )
```

First, expand to include all years

```{r}
#| label: tree-expand

#We do the expand() in chunks because it is computationally expensive otherwise
plot_chunks <- 
  tree_to_interpolate |>
  ungroup() |>
  select(PLOT_COMPOSITE_ID) |>
  distinct() |>
  mutate(plot_chunk = ntile(PLOT_COMPOSITE_ID, n = 10))

all_yrs <- 
  left_join(tree_to_interpolate, plot_chunks, by = join_by(PLOT_COMPOSITE_ID)) |>
  group_by(plot_chunk) |> 
  group_split() |> 
  map(\(x) {
    x |> 
      group_by(
        TREE_COMPOSITE_ID
      ) |>
      expand(YEAR = full_seq(INVYR, 1))
  }) |> list_rbind()

tree_annual <- 
  right_join(
    tree_to_interpolate,
    all_yrs,
    by = join_by(TREE_COMPOSITE_ID, INVYR == YEAR)
  ) |>
  arrange(TREE_COMPOSITE_ID, INVYR) |> 
  rename(YEAR = INVYR) |> 
  #fill any time-invariant columns like PLOT_COMPOSITE_ID
  fill(PLOT_COMPOSITE_ID, SPCD)
tree_annual
```

Then interpolate continuous variables with our custom `approx()` wrapper function, `inter_extra_polate()` and categorical variables with `step_interp()`.

```{r}
#| label: tree-interpolate
tree_interpolated <- 
  tree_annual |> 
  group_by(TREE_COMPOSITE_ID) |> 
  mutate(
    #linearly interpolate/extrapolate
    across(c(ACTUALHT, DIA, HT, CULL, CR),
           \(var) inter_extra_polate(x = YEAR, y = var)),
    #interpolate to switch at midpoint (rounded up)
    across(c(STATUSCD, DECAYCD, STANDING_DEAD_CD, STDORGCD, CONDID, COND_STATUS_CD), 
           step_interp)
  ) |> ungroup()
tree_interpolated
```

### Mortality

I think maybe here is where we need to deal with estimated mortality year to correct `STATUSCD`, `DECAYCD` and `STANDING_DEAD_CD`.  This is a fork in the road, producing two possible tables after this depending on whether `MORTYR` is used or not.

```{r}
tree_interpolated_mortyr <- 
  tree_interpolated |> 
  group_by(TREE_COMPOSITE_ID) |> 
  mutate(
    #to use MORTYR
    first_dead = if_else(
      condition = any(!is.na(MORTYR)), #has recorded MORTYR
      true = max(MORTYR, na.rm = TRUE),
      false = YEAR[min(which(STATUSCD == 2))]
    )
    #otherwise
    # first_dead = YEAR[min(which(STATUSCD == 2))]
  ) |> 
  #then adjust STATUSCD & DECAYCD
  mutate(STATUSCD = if_else(YEAR >= first_dead, 2, STATUSCD)) |>
  #MORTYR might be earlier than the midpoint, so backfill NAs for DECAYCD and STANDING_DEAD_CD
  fill(DECAYCD, STANDING_DEAD_CD, .direction = "up") |> 
  #But, STANDING_DEAD_CD only applies to dead trees
  mutate(STANDING_DEAD_CD = if_else(STATUSCD == 2, STANDING_DEAD_CD, NA)) |> 
  #and DECAYCD only applies to standing dead trees > 4.9 DIA
  mutate(DECAYCD = if_else(STANDING_DEAD_CD == 1 & DIA > 4.9, DECAYCD, NA)) |> 
  #fallen trees shouldn't have measurements for DIA, HT, and ACTUALHT
  mutate(
    across(c(DIA, HT, ACTUALHT),
           \(x) if_else(STANDING_DEAD_CD == 0, NA, x, missing = x))
  )
```

Inspect some trees

```{r}
tree_interpolated_mortyr |>
  filter(any(!is.na(MORTYR))) |>
  filter(length(unique(HT)) > 2) |>
  filter(all(c(0, 1) %in% STANDING_DEAD_CD)) |>
  arrange(TREE_COMPOSITE_ID, YEAR) |>
  select(TREE_COMPOSITE_ID, YEAR, MORTYR, first_dead, DIA, HT, STATUSCD, STANDING_DEAD_CD, DECAYCD)
```
```{r}
tree |> filter(TREE_COMPOSITE_ID == "8_1_19_89224_3_24") |> 
  select(INVYR, DIA, HT, STATUSCD, STANDING_DEAD_CD, everything())
```

There are some trees where interpolation fails.
I suspect they are all ones with only one non-NA measurement and there is nothing we can do.

```{r}
#| eval: false
failed_to_interpolate <- 
  tree_interpolated |> 
  group_by(TREE_COMPOSITE_ID) |> 
  filter(any(is.na(DIA))) |>
  pull(TREE_COMPOSITE_ID) |>
  unique()
tree |> 
  group_by(TREE_COMPOSITE_ID) |> 
  filter(!all(STATUSCD != 1)) |> 
  filter(TREE_COMPOSITE_ID %in% failed_to_interpolate) |>
  arrange(TREE_COMPOSITE_ID, INVYR) |> 
  select(TREE_COMPOSITE_ID, INVYR, STATUSCD, DIA, ACTUALHT, everything())
```


::: callout-important
## Question

It seems pretty clear that DIA shouldn't change after a tree's death, but would HT and ACTUALHT change for a standing dead tree?  Probably?  However, we don't want to extrapolate negative (or even 0?) values, and the tree shouldn't *grow* after death, right?

```{r}
tree |> 
  filter(any(lag(ACTUALHT) > ACTUALHT)) |> #trees that shrank
  filter(sum(STATUSCD == 2) > 1) |> # and were recorded dead at least twice
  select(TREE_COMPOSITE_ID, INVYR, STATUSCD, STANDING_DEAD_CD, DIA, HT, ACTUALHT) |> 
  arrange(TREE_COMPOSITE_ID, INVYR)
```


```{r}
#| eval: false

#only works with RI or full database
tree |> 
  filter(TREE_COMPOSITE_ID == "44_1_7_229_1_1") |> 
  select(TREE_COMPOSITE_ID, INVYR, STATUSCD, STANDING_DEAD_CD, DIA, HT, ACTUALHT)
```

E.g. this tree in RI went from 40 to 18 in HT between 2008 and 2013 and then was recorded as "no status" in 2020 so extrapolated values become negative.

:::


#### `REF_SPECIES` table

Join in time-invariant columns that are required for carbon estimation

```{r}
# REF_SPECIES table variables
ref_species_raw <- read_csv(here("data/rawdat/REF_SPECIES.csv"))
ref_species <- ref_species_raw |> 
  select(SPCD,
         JENKINS_SPGRPCD, 
         SFTWD_HRDWD, 
         CARBON_RATIO_LIVE,
         WDSG = WOOD_SPGR_GREENVOL_DRYWT)
tree_interpolated_mortyr <- left_join(tree_interpolated_mortyr, ref_species, by = join_by(SPCD))
```

#### `ECOSUBCD` from the `plot` table

```{r}
plot_ecosubcds <- plot |>
  select(PLOT_COMPOSITE_ID, ECOSUBCD) |>
  distinct()

tree_interpolated_mortyr <- 
  left_join(tree_interpolated_mortyr, plot_ecosubcds, by = join_by(PLOT_COMPOSITE_ID))
```

#### REF_TREE_DECAY_PROP

::: callout-important
## Question

I'm not sure what's going on here, but it *looks* like the code creates a new column called `CULL_DECAY_RATIO` using the `DENSITY_PROP` column for `DECAYCD` 3.
Then later it looks like this is overwritten if the tree is NOT alive (`STATUSCD!=1`) to be 1.
There are no notes in the code (either Renata's or David Walker's) indicating why this is done.
`DECAYCD` 3:

> Only limb stubs exist; the top is broken; a variable amount of bark remains; sapwood is sloughing; heartwood has advanced decay in upper bole and is beginning at the base.
:::

```{r}
ref_tree_decay_prop <- read_csv(here("data/rawdat/REF_TREE_DECAY_PROP.csv"))
ref_tree_carbon_ratio_dead <- read_csv(here("data/rawdat/REF_TREE_CARBON_RATIO_DEAD.csv"))
```

```{r}
tree_interpolated_mortyr <- 
  tree_interpolated_mortyr |> 
  ungroup() |> 
  #first joins by SFTWD_HRDWD only the DENSITY_PROP column for DECAYCD 3, but calls it CULL_DECAY_RATIO
  left_join(
    ref_tree_decay_prop |>
      filter(DECAYCD == 3) |>
      select(
        SFTWD_HRDWD,
        #not sure I understand the naming of this variable
        CULL_DECAY_RATIO = DENSITY_PROP
      ),
    by = join_by(SFTWD_HRDWD) 
  ) |> 
  #then joins additional columns (including DENSITY_PROP) based on DECAYCD and SFTWD_HRDWD
  left_join(
    ref_tree_decay_prop |>
      select(SFTWD_HRDWD,
             DECAYCD,
             DENSITY_PROP,
             BARK_LOSS_PROP,
             BRANCH_LOSS_PROP),
    by = join_by(DECAYCD, SFTWD_HRDWD)
  ) |> 
  #then join to the carbon ratio dead table to get CARBON_RATIO
  left_join(
    ref_tree_carbon_ratio_dead |>
      select(SFTWD_HRDWD, DECAYCD, CARBON_RATIO),
    by = join_by(DECAYCD, SFTWD_HRDWD)
  ) 
```

#### Additional wrangling

`NA`s for `CULL` get replaced with 0s (not entirely sure why, but assumes that no data = 100% live wood)

```{r}
tree_interpolated_mortyr <- tree_interpolated_mortyr |> 
  mutate(CULL = ifelse(is.na(CULL), 0, CULL))
```


### Visualize results

Let's take a sample of trees and visualize them.

```{r}
set.seed(123)

tree_sample <- tree_interpolated_mortyr |> pull(TREE_COMPOSITE_ID) |> unique() |> sample(50)
tree_subset <- tree_interpolated_mortyr |>
  filter(TREE_COMPOSITE_ID %in% tree_sample)
tree_subset |> 
  select(TREE_COMPOSITE_ID, YEAR, DIA, HT, ACTUALHT, CR, CULL, DECAYCD, STANDING_DEAD_CD, STDORGCD, CONDID) |> 
  pivot_longer(DIA:CONDID, names_to = "variable") |> 
  ggplot(aes(x = YEAR, y = value, color = TREE_COMPOSITE_ID)) +
  facet_wrap(vars(variable), scales = "free_y") +
  geom_line(show.legend = FALSE)
```

This makes me think about caveats of interpolation since it's not really appropriate to linearly interpolate ACTUALHT—trees tops don't break off linearly.

# Carbon estimation

These are some final preparations only necessary for running the code in `R/add_carbon_variables_mi.R`.

::: callout-note
I think some of the odd looking choices here have to do with limitations in the carbon estimation code provided by David Walker.  Index-based filtering doesn't work when there are `NA`s.

E.g.

```{r}
#| error: true
df <- data.frame(x = c(1, 2, NA), y = 1:3)
df |> filter(x < 2) #works
df[df$x < 2] #errors
```
:::


```{r}
tree_prepped <-
  tree_interpolated_mortyr |>
  mutate(
    #use 1 for CULL_DECAY_RATIO for live trees
    CULL_DECAY_RATIO = if_else(STATUSCD == 1, CULL_DECAY_RATIO, 1),
    # Using 0 instead of NA for live trees likely has to do with index-based
    # filtering
    STANDING_DEAD_CD = if_else(STATUSCD == 1, 0, STANDING_DEAD_CD),
    DECAYCD = if_else(STATUSCD == 1, 0, DECAYCD),
    # these are the proportion *remaining* after deducting for decay, so set to
    # 1 for live trees
    DECAY_WD = if_else(STATUSCD == 1, 1, DENSITY_PROP),
    DECAY_BK = if_else(STATUSCD == 1, 1, BARK_LOSS_PROP),
    DECAY_BR = if_else(STATUSCD == 1, 1, BRANCH_LOSS_PROP),
    #TODO: why is this called C_FRAC if it is a percentage?
    C_FRAC = if_else(STATUSCD == 1,
                     CARBON_RATIO_LIVE * 100,
                     CARBON_RATIO * 100)
  ) |> 
  #done with these columns
  select(-CARBON_RATIO_LIVE, CARBON_RATIO, DENSITY_PROP, BARK_LOSS_PROP, BRANCH_LOSS_PROP)
```

Filtering

::: callout-important
## Question

Why only include `COND_STATUS_CD` 1 (accessible forest land)?
This removes 1,627 rows for RI
:::

```{r}
fiadb <- tree_prepped <- tree_prepped |> 
  #only keep accessible forest land (why?)
  filter(COND_STATUS_CD == 1) |> 
  #remove fallen trees
  filter((STANDING_DEAD_CD == 1 & STATUSCD == 2) | STATUSCD == 1) |> 
  #remove trees with no recorded DIA (where interpolation failed I guess?)
  filter(!is.na(DIA)) |> 
  #done with COND_STATUS_CD column
  select(-COND_STATUS_CD)
```

With `fiadb` in the global environment, we can now run `add_carbon_variables_midpoint.R` successfully!! 🎉

[^1]: About 60 trees in RI do actually "change" species.
    These are likely misidentifications.
    More at <https://github.com/mekevans/forestTIME-builder/issues/53>
