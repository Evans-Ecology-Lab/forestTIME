---
title: "Untitled"
format: html
---

Following the 'rFIA demystified' [vignette](https://doserlab.com/files/rfia/articles/fiademystified#with-sampling-errors) on estimation at the population level with sampling errors, but with interpolation and extrapolation to annualize data.

The sections below are intended to represent chunks that could be turned into functions, e.g. `expand_time()`, `interpolate_data()`, `estimate_carbon()`, etc.

```{r}
#| label: setup
library(rFIA)
library(readr)
library(here)
library(purrr)
library(dplyr)
col_types <- read_rds(here("data/rawdat/table_types.rds"))
col_types_readr <- col_types |> 
  map(\(v) { #for every vector element of col_types...
    as.list(v) |> #convert to list
      #then modify to replace with readr col_*() column specification functions
      modify_at(which(v == "STRING"), \(x) col_character()) |> 
      modify_at(which(v == "INTEGER"), \(x) col_integer()) |> 
      modify_at(which(v == "DOUBLE"), \(x) col_double())
  })
```

## Data Preparation

I need to make sure I have all the columns for population estimation *and* all the columns for carbon estimation using the walker code (documented better in `annual_carbon_estimation.qmd`).

To do that, we need additional tables not already unzipped.
I'll use RI as an example state since those tables are already built in to `rFIA`

```{r}
db <- fiaRI
"PLOGEOM" %in% names(db)
#doesn't have the PLOTGEOM table in it
PLOTGEOM <- read_csv(
  here("data/rawdat/state/RI_PLOTGEOM.csv"),
  col_types = col_types_readr$plotgeom_types
) |> select(CN, ECOSUBCD) |> 
  mutate(CN = as.numeric(CN)) #just to match vignette and fiaRI data


```

Get the columns needed

```{r}
# Select only the columns we need from each table, to keep things slim
PLOT <- 
  db$PLOT |> 
  mutate(plot_ID = paste(STATECD, UNITCD, COUNTYCD, PLOT, sep = "_"), .before = 1) |> 
  select(plot_ID, CN, INVYR, MACRO_BREAKPOINT_DIA)

COND <- 
  select(db$COND, PLT_CN, CONDID, CONDPROP_UNADJ, PROP_BASIS, 
         COND_STATUS_CD, STDORGCD, OWNGRPCD)

TREE <- 
  db$TREE |> 
  mutate(
    plot_ID = paste(STATECD, UNITCD, COUNTYCD, PLOT, sep = "_"),
    tree_ID = paste(STATECD, UNITCD, COUNTYCD, PLOT, SUBP, TREE, sep = "_"),
    .before = 1
  ) |> 
  select(plot_ID, tree_ID, PLT_CN, CONDID, SUBP, TREE, STATUSCD, DECAYCD,
         STANDING_DEAD_CD, DRYBIO_AG, CARBON_AG, TPA_UNADJ, DIA, CR, HT,
         ACTUALHT, CULL, SPCD)

POP_ESTN_UNIT <- 
  select(db$POP_ESTN_UNIT, CN, EVAL_CN, AREA_USED, P1PNTCNT_EU)

POP_EVAL <-
  select(db$POP_EVAL, EVALID, EVAL_GRP_CN, ESTN_METHOD, CN, END_INVYR,
         REPORT_YEAR_NM)

POP_EVAL_TYP <- select(db$POP_EVAL_TYP, EVAL_TYP, EVAL_CN)

POP_PLOT_STRATUM_ASSGN <- 
  select(db$POP_PLOT_STRATUM_ASSGN, STRATUM_CN, PLT_CN, INVYR)

POP_STRATUM <- 
  select(db$POP_STRATUM, ESTN_UNIT_CN, EXPNS, P2POINTCNT, ADJ_FACTOR_MICR,
         ADJ_FACTOR_SUBP, ADJ_FACTOR_MACR, CN, P1POINTCNT)
```

```{r}
# Join the tables
data <- PLOT %>%
  # Add a PLT_CN column for easy joining
  mutate(PLT_CN = CN) %>%
  left_join(PLOTGEOM, by = "CN") |> 
  # Join COND & TREE
  left_join(COND, by = 'PLT_CN') %>%
  left_join(TREE, by = join_by(plot_ID, PLT_CN, CONDID)) %>%
  # Population tables
  left_join(POP_PLOT_STRATUM_ASSGN, by = join_by(INVYR, PLT_CN), relationship = 'many-to-many') %>% #many-to-many relationship?
  left_join(POP_STRATUM, by = c('STRATUM_CN' = 'CN')) %>%
  left_join(POP_ESTN_UNIT, by = c('ESTN_UNIT_CN' = 'CN')) %>%
  left_join(POP_EVAL, by = c('EVAL_CN' = 'CN')) %>%
  left_join(POP_EVAL_TYP, by = 'EVAL_CN', relationship = 'many-to-many') |> 
  filter(INVYR >= 2000.0)
```

remove problems

```{r}
#remove trees that are always dead
data <- data |> 
  group_by(tree_ID) |> 
  filter(!(all(is.na(DIA)) |
             all(is.na(ACTUALHT)) |
             all(is.na(HT)) |
             all(STATUSCD != 1))) |> 
#remove trees that change species
  filter(length(unique(SPCD)) == 1) |> 
  ungroup()
```

coalesce `ACTUALHT`

```{r}

```

## Merge ref data

Required columns from REF_SPECIES and other tables get merged in here

```{r}

```

## Expand

Here's where I'll expand to include all years and then fill any time-invariant columns

```{r}

```

## Interpolate

Then I'll apply the interpolation functions here

```{r}

```

## TPA_UNADJ

Then we'll merge in TPA_UNADJ based on rules Dani has figured out

```{r}

```

## Adjust for mortality

Then we'll adjust all columns related to mortality (`STATUSCD`, `STANDING_DEAD_CD`, `DECAYCD`, and dimensions like `DIA`, `HT`, etc.)

```{r}

```

## Estimate carbon

Here, our table will get run through the david walker code (which, ideally will be turned into a function)

```{r}

```

## Plot level sums

Get tree and area attributes as outlined in rFIA vignette

## Strata level

Then summarize by stratum

## Population level

Then sum attributes across estimation units for region of interest
