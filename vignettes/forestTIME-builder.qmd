---
title: "forestTIME-builder"
vignette: >
  %\VignetteIndexEntry{Basic workflow}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
format:
  html:
    toc: true
    df-print: paged
    link-external-newwindow: true
    link-external-icon: true
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
---

```{r}
#| label: setup
library(forestTIME.builder)
library(dplyr)
```

## Data Download

`fia_download()` downloads zip files of all CSVs and extracts the necessary ones.
It will skip downloading if the files already exist.

```{r}
#| label: download-data
#| eval: false
fia_download(
  states = "DE", 
  download_dir = "fia",
  keep_zip = TRUE
)
```

```{r}
#| echo: false
#| eval: false

#only re-run if you need to re-generate the example data for the package
fia_download(
  states = "DE", 
  download_dir = "inst/exdata",
  keep_zip = TRUE
)
```

## Data Preparation

I need to make sure I have all the columns for population estimation *and* all the columns for carbon estimation using the walker code (documented better in `annual_carbon_estimation.qmd`).

`read_fia()` is a wrapper around `rFIA::readFIA()` and reads in all the required tables as a list of data frames.

```{r}
#| label: read-data
#| eval: false
db <- read_fia(states = "DE", dir = "fia")
names(db)
```

```{r}
#| echo: false

#actually just read in the example data included in the package
db <- read_fia(states = "DE", dir = system.file("exdata", package = "forestTIME.builder"))
names(db)
```

`prep_data()` gets all the columns needed into a single table and create the unique plot and tree IDS, `plot_ID` and `tree_ID`.


```{r}
#| label: prep-data
data <- prep_data(db)
data
```

Check that each tree has only 1 entry per year

```{r}
#| label: check-data
n <- data |> 
  group_by(tree_ID, INVYR) |> 
  filter(!is.na(tree_ID)) |> #remove empty plots
  summarise(n = n(), .groups = "drop") |>
  filter(n > 1) |> 
  nrow()
stopifnot(n == 0)
```

## Expand

`expand_data()` expands the table to include all years between inventories.
Time-invariant columns including `plot_ID`, `SPCD`, `ECOSUBCD`, `DESIGNCD`, and `PROP_BASIS` are filled down.

```{r}
#| label: expand-data
data_expanded <- expand_data(data)
data_expanded
```

## Interpolate

`interpolate_data()` then interpolates continuous and categorical variables between surveys.
Continuous variables are interpolated with `inter_extra_polate()` and categorical variables are interpolated with `step_interp()`.
`interpolate_data()` also joins in the `TPA_UNADJ` column based on `DESIGNCD` and `DIA`.

```{r}
#| label: interpolate-data
data_interpolated <- interpolate_data(data_expanded)
data_interpolated
```

::: callout-important
I'm still unsure if `CONDPROP_UNADJ` is interpolated correctly ([issue #64](https://github.com/mekevans/forestTIME-builder/issues/64){.uri})
:::

## Adjust for mortality

`adjust_mortality()` adjusts all columns related to mortality (`STATUSCD`, `STANDING_DEAD_CD`, `DECAYCD`, and dimensions like `DIA`, `HT`, etc.).
E.g.
`DECAYCD` only applies to standing dead trees and `STANDING_DEAD_CD` only applies to trees with `STATUSCD` 2 (dead).
Trees that switch to `STATUSCD` 0 and have `RECONCILECD` 5, 6, or 9 get dropped at the midpoint between surveys ([issue #59](https://github.com/mekevans/forestTIME-builder/issues/59)).

```{r}
#| label: adjust-mort
data_mortyr <- adjust_mortality(data_interpolated, use_mortyr = TRUE)
data_midpt <- adjust_mortality(data_interpolated, use_mortyr = FALSE)
all.equal(data_mortyr, data_midpt)
```

These tables will be identical in states like RI where `MORTYR` is never used, but in states like CO these tables will differ slightly for some subset of trees.
In `scripts/state-parquet.R`, the table that uses `MORTYR` is only produced if `MORTYR` is recorded for trees in that state.

## Prep for Carbon Estimation

`prep_carbon()` joins in reference tables based on species code.
These variables are needed by the carbon estimation functions.
It also converts some `NA`s because the functions provided by David Walker are not set up to handle indexing with `NA`s.

```{r}
#| label: prep-carbon
data_midpt_prepped <- prep_carbon(data_midpt)
data_midpt_prepped
```

## Estimate carbon

`estimate_carbon()` wraps some of the code David Walker provided into a function that returns a data frame.

::: callout-note
In particular, it uses the version of `predictCRM2.R` originally from `carbon_code/Decay_and_Dead/R/VT_CRM2_ApplyFuns.R` ([issue #66](https://github.com/mekevans/forestTIME-builder/issues/66){.uri}).
:::

```{r}
#| label: estimate-carbon
carbon_midpt <- estimate_carbon(data_midpt_prepped)
carbon_midpt
```
